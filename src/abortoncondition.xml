<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4" main_tree_to_execute="SonarTest">
  <BehaviorTree ID="SonarTest">
    <Sequence name="initialize_and_monitor">
      <SetBlackboard value="false" output_key="emergency_triggered"/>
      <SetBlackboard value="true" output_key="mission_requires_sonar"/>
      <ReactiveSequence name="monitor_and_execute">
        <!-- Sonar monitoring -->
        <ReactiveFallback name="sonar_check_fallback">
          <CheckSonarStatus name="check_sonar" timeout_seconds="5.0"/>
          <Sequence name="sonar_failure_sequence">
            <SetBlackboard value="Sonar failure detected" output_key="failure_reason"/>
            <SetBlackboard value="true" output_key="emergency_triggered"/>
          </Sequence>
        </ReactiveFallback>
        
        <!-- Mission execution with emergency abort -->
        <Fallback>
          <!-- First check if we're in emergency mode -->
          <Sequence name="handle_emergency">
            <CheckBlackboard key="emergency_triggered" expected_value="true"/>
            <NavigateToWaypoint name="emergency_waypoint"
                              x="-203.70"
                              y="77.50"
                              z="194.90"
                              velocity="0.4"
                              fixed_heading="false"
                              heading="0.0"/>
          </Sequence>
          
          <!-- Normal mission only executes if not in emergency -->
          <Decorator ID="AbortOnCondition" condition="emergency_triggered">
            <Sequence name="test_mission">
              <NavigateToWaypoint name="undock_waypoint"
                                x="-220.70"
                                y="60.50"
                                z="194.90"
                                velocity="0.1"
                                fixed_heading="true"
                                heading="3.14"/>
              <StationKeeping name="station_keep_after_undock"
                            x="-220.70"
                            y="60.50"
                            z="194.90"
                            heading="3.14"
                            duration="10"/>
              <NavigateToWaypoint name="pipeline_waypoint"
                                x="-210.50"
                                y="108.00"
                                z="193.00"
                                velocity="0.4"
                                fixed_heading="false"
                                heading="0.0"/>
            </Sequence>
          </Decorator>
        </Fallback>
      </ReactiveSequence>
    </Sequence>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="CheckBlackboard">
      <input_port name="key" type="String">Key to check</input_port>
      <input_port name="expected_value" type="String">Expected value</input_port>
    </Condition>
    <Condition ID="CheckSonarStatus">
      <input_port name="timeout_seconds" type="Double">Maximum time without messages before failure</input_port>
    </Condition>
    <Action ID="NavigateToWaypoint">
      <input_port name="x" type="Double">X coordinate</input_port>
      <input_port name="y" type="Double">Y coordinate</input_port>
      <input_port name="z" type="Double">Z coordinate</input_port>
      <input_port name="velocity" type="Double">Desired velocity</input_port>
      <input_port name="fixed_heading" type="Boolean">Whether to use fixed heading</input_port>
      <input_port name="heading" type="Double">Desired heading</input_port>
    </Action>
    <Action ID="StationKeeping">
      <input_port name="x" type="Double">X coordinate</input_port>
      <input_port name="y" type="Double">Y coordinate</input_port>
      <input_port name="z" type="Double">Z coordinate</input_port>
      <input_port name="heading" type="Double">Desired heading</input_port>
      <input_port name="duration" type="Int">Duration in seconds</input_port>
    </Action>
    <Decorator ID="AbortOnCondition">
      <input_port name="condition" type="String">Blackboard key to check for abortion</input_port>
    </Decorator>
    <Action ID="SetBlackboard">
      <input_port name="output_key" type="String">Key to set</input_port>
      <input_port name="value" type="String">Value to set</input_port>
    </Action>
  </TreeNodesModel>
</root>