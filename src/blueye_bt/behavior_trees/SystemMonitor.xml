<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
    <BehaviorTree ID="SystemMonitor">
        <ReactiveSequence name="system_monitoring">
            <!-- Battery check is always critical -->
            <Inverter>
                <CheckBatteryLevel name="check_battery" />
            </Inverter>
            
            <!-- Camera failure handling - only trigger emergency if camera is required -->
            <Fallback name="camera_checks">
                <!-- If camera check passes, continue -->
                <CheckCameraStatus name="check_camera" timeout_seconds="2.0" />
                
                <!-- If camera required flag is not set, continue anyway -->
                <Inverter>
                    <CheckBlackboard key="mission_requires_camera" expected_value="true"/>
                </Inverter>
                
                <!-- Otherwise (camera failed AND required), trigger emergency -->
                <Sequence name="camera_failure_sequence">
                    <SetBlackboard output_key="failure_reason" value="Camera failure detected" />
                    <SetBlackboard output_key="emergency_triggered" value="true" />
                    <SubTree ID="EmergencyReturn" />
                </Sequence>
            </Fallback>
            
            <!-- Sonar failure handling - only trigger emergency if sonar is required -->
            <Fallback name="sonar_checks">
                <!-- If sonar check passes, continue -->
                <CheckSonarStatus name="check_sonar" timeout_seconds="3.0" min_beam_count="10" />
                
                <!-- If sonar required flag is not set, continue anyway -->
                <Inverter>
                    <CheckBlackboard key="mission_requires_sonar" expected_value="true"/>
                </Inverter>
                
                <!-- Otherwise (sonar failed AND required), trigger emergency -->
                <Sequence name="sonar_failure_sequence">
                    <SetBlackboard output_key="failure_reason" value="Sonar failure detected" />
                    <SetBlackboard output_key="emergency_triggered" value="true" />
                    <SubTree ID="EmergencyReturn" />
                </Sequence>
            </Fallback>
            
            <!-- Watchdog failures are always critical -->
            <Fallback name="watchdog_checks">
                <SystemWatchdog name="system_watchdog" max_failures="5" min_reset_interval="60.0" failing_topics="{failing_topics}" />
                <Sequence name="system_failure_sequence">
                    <SetBlackboard output_key="failure_reason" value="System failure: {failing_topics}" />
                    <SetBlackboard output_key="emergency_triggered" value="true" />
                    <SubTree ID="EmergencyReturn" />
                </Sequence>
            </Fallback>
        </ReactiveSequence>
    </BehaviorTree>

    <TreeNodesModel>
        <Action ID="CheckBlackboard">
            <input_port name="key" type="String">Key to check</input_port>
            <input_port name="expected_value" type="String">Expected value</input_port>
        </Action>
        <Action ID="SetBlackboard">
            <input_port name="output_key" type="String">Key to set</input_port>
            <input_port name="value" type="String">Value to set</input_port>
        </Action>
        <Condition ID="CheckBatteryLevel">
            <output_port name="battery_level" type="Double">Current battery level percentage</output_port>
        </Condition>
        <Condition ID="CheckCameraStatus">
            <input_port name="timeout_seconds" type="Double">Maximum time without messages before failure</input_port>
        </Condition>
        <Condition ID="CheckSonarStatus">
            <input_port name="timeout_seconds" type="Double">Maximum time without messages before failure</input_port>
            <input_port name="min_beam_count" type="Int">Minimum number of beams required</input_port>
        </Condition>
        <Condition ID="SystemWatchdog">
            <input_port name="max_failures" type="Int">Maximum consecutive failures before reset</input_port>
            <input_port name="min_reset_interval" type="Double">Minimum time between resets in seconds</input_port>
            <output_port name="failing_topics" type="String">List of failing topics</output_port>
        </Condition>
        <SubTree ID="EmergencyReturn" />
    </TreeNodesModel>
</root>