<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4"
      main_tree_to_execute="BlueyeAutonomyControl">
  <include path="UnDocking.xml"/>

  <include path="Transit_1.xml"/>

  <include path="Transit_2.xml"/>

  <include path="PipeLineInspection.xml"/>

  <include path="WreckageInspection.xml"/>

  <include path="Homing.xml"/>

  <include path="Docking.xml"/>

  <include path="SystemMonitor.xml"/>

  <BehaviorTree ID="BlueyeAutonomyControl">
    <Sequence name="initialize_and_monitor">
      <SetBlackboard value="false"
                     output_key="emergency_triggered"/>
      <SetBlackboard value="true"
                     output_key="mission_requires_sonar"/>
      <SetBlackboard value="true"
                     output_key="mission_requires_camera"/>
      <ReactiveSequence name="monitor_and_execute">
        <ReactiveSequence name="system_monitors">
          <Fallback name="battery_check">
            <Sequence name="battery_low_return">
              <CheckBatteryLevel/>
              <SetBlackboard value="true"
                             output_key="emergency_triggered"/>
              <SetBlackboard value="Battery level critical"
                             output_key="failure_reason"/>
            </Sequence>
            <Sequence name="battery_ok">
              <AlwaysSuccess/>
            </Sequence>
          </Fallback>
          <ReactiveFallback name="sonar_check_fallback">
            <CheckSonarStatus name="check_sonar"
                              timeout_seconds="5.0"/>
            <Sequence name="sonar_failure_sequence">
              <SetBlackboard value="Sonar failure detected"
                             output_key="failure_reason"/>
              <SetBlackboard value="true"
                             output_key="emergency_triggered"/>
            </Sequence>
          </ReactiveFallback>
          <ReactiveFallback name="camera_check_fallback">
            <CheckCameraStatus name="check_camera"
                               timeout_seconds="5.0"/>
            <Sequence name="camera_failure_sequence">
              <SetBlackboard value="Camera failure detected"
                             output_key="failure_reason"/>
              <SetBlackboard value="true"
                             output_key="emergency_triggered"/>
            </Sequence>
          </ReactiveFallback>
          <ReactiveFallback name="watchdog_check_fallback">
            <SystemWatchdog name="system_watchdog"
                            max_failures="5"
                            failing_topics=""/>
            <Sequence name="watchdog_failure_sequence">
              <SetBlackboard value="System watchdog failure"
                             output_key="failure_reason"/>
              <SetBlackboard value="true"
                             output_key="emergency_triggered"/>
            </Sequence>
          </ReactiveFallback>
        </ReactiveSequence>
        <Fallback name="mission_or_emergency">
          <AbortOnCondition condition="emergency_triggered">
            <Sequence name="complete_mission">
              <PublishState state="1"/>
              <SubTree ID="UnDocking"/>
              <PublishState state="2"/>
              <SubTree ID="Transit_1"/>
              <PublishState state="3"/>
              <SubTree ID="PipeLineInspection"/>
              <PublishState state="4"/>
              <SubTree ID="Transit_2"/>
              <PublishState state="5"/>
              <SubTree ID="WreckageInspection"/>
              <PublishState state="6"/>
              <SubTree ID="Homing"/>
              <PublishState state="7"/>
              <SubTree ID="Docking"/>
            </Sequence>
          </AbortOnCondition>
          <Sequence name="handle_emergency">
            <CheckBlackboard key="emergency_triggered"
                             expected_value="true"/>
            <SubTree ID="Homing"/>
            <PublishState state="6"/>
            <SubTree ID="Docking"/>
            <PublishState state="7"/>
          </Sequence>
        </Fallback>
      </ReactiveSequence>
    </Sequence>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Decorator ID="AbortOnCondition">
      <input_port name="condition"
                  type="String">Blackboard key to check for abortion</input_port>
    </Decorator>
    <Action ID="CheckBatteryLevel"
            editable="true"/>
    <Condition ID="CheckBlackboard">
      <input_port name="key"
                  type="String">Key to check</input_port>
      <input_port name="expected_value"
                  type="String">Expected value</input_port>
    </Condition>
    <Condition ID="CheckCameraStatus">
      <input_port name="timeout_seconds"
                  type="Double">Maximum time without messages before failure</input_port>
    </Condition>
    <Condition ID="CheckSonarStatus">
      <input_port name="timeout_seconds"
                  type="Double">Maximum time without messages before failure</input_port>
    </Condition>
    <Action ID="PublishState">
      <input_port name="state"
                  type="Int">Mission state ID</input_port>
    </Action>
    <Condition ID="SystemWatchdog">
      <input_port name="max_failures"
                  type="Int">Maximum consecutive failures before logging warning</input_port>
      <output_port name="failing_topics"
                   type="String">List of failing topics</output_port>
    </Condition>
  </TreeNodesModel>

</root>
